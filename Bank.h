//
// Created by Ben Sykes and Liam Stickney on 2019-04-01.
//

#ifndef BENNYSBANK_BANK_H
#define BENNYSBANK_BANK_H

#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include "Account.h"
#include "LinkedTransactionList.h"
#include "Transaction.h"
#include "json.hpp"

using json = nlohmann::json;
using namespace std;

class Bank {
private:
    int autoID = 0;
    vector<Account*> * accountList;

    /**
     * Insert json data into the bank data structure
     * @param data The JSON data to be inserted
     */
    void insertIntoBank(json data) {
        for (int i=0; i < data.size(); i++) {
            Account * account = new Account(
                    autoID++,
                    data[i]["fName"],
                    data[i]["lName"],
                    data[i]["cBal"],
                    data[i]["sBal"]
                    );

            json tempCheck = data[i]["checkingTransactions"];

            // Add all checking account transactions
            for (int j=0; j < tempCheck.size(); j++) {
                Transaction * tempTrans = new Transaction(tempCheck[j]["id"], tempCheck[j]["amt"]);
                account->getCheckingTransactions()->insert(tempTrans);
            }

            json tempSave = data[i]["savingsTransactions"];

            // Add all savings account transactions
            for (int j=0; j < tempSave.size(); j++) {
                Transaction * tempTrans = new Transaction(tempSave[j]["id"], tempSave[j]["amt"]);
                account->getSavingsTransactions()->insert(tempTrans);
            }

            // Finally push account to the Bank
            accountList->push_back(account);
        }

        cout << "Done loading accounts from file into application" << endl;
    }

    /**
     * Write the existing JSON data collected from the bank to a selected file
     * @param data The data to be saved.
     */
    void writeToFile(json data) {
        string path = "./dataOut.json";

        cout << "Please enter a path to save the data to [./dataOut.json]: ";
        cin >> path;

        ofstream dataFile (((path.length() > 0) ? path : "./dataOut.json"));
        if (dataFile.is_open())
        {
            dataFile << data.dump();
            dataFile.close();
            cout << "Successfully saved data to file, '" << path << "'" << endl;
        }
        else cout << "Unable to open file";
    }

public:
    /**
     * Constructor/Destructors
     */
    Bank() {
        this->accountList = new vector<Account*>();
    }

    ~Bank() {
        delete accountList;
    }

    /**
     * Return a list of accounts
     * @return The list of accounts
     */
    vector<Account*> * getAccounts() {
        return this->accountList;
    };

    /**
     * Retrieves autogenerated ID using for next user
     * @return The next UID for account to be added.
     */
    int getAutoID() {
        return this->autoID;
    }

    /**
     * Add an account to the bank
     */
    void addAccount() {
        string fName, lName;
        double cBal, sBal;

        cout << "Enter your first name: " << endl;
        cin >> fName;
        cout << "Enter your last name: " << endl;
        cin >> lName;
        cout << "Enter starting checking balance: $";
        cin >> cBal;
        cout << endl;
        cout << "Enter starting savings balance: $";
        cin >> sBal;
        cout << endl;

        Account * account = new Account(
                autoID++,
                fName,
                lName,
                cBal,
                sBal
        );

        this->accountList->push_back(account);
    };

    /**
     * Delete an account from the bank
     * @param uid The Unique ID of the account the user wishes to delete.
     */
    void delAccount(int uid) {
        Account * targetAccount = this->searchAccount(uid);
        this->getAccounts()->erase(this->getAccounts()->begin() + uid);
        delete targetAccount;
    };

    /**
     * Searches for an account registered at the bank
     * @param searchID The UID of the account being searched for
     * @return The account IFF found, else NULL
     */
    Account * searchAccount(int searchID) {

        if (searchID > this->getAccounts()->size()) {
            cout << "Account not found..." << endl;
            return NULL;
        }

        int low = 0;
        int high = this->getAccounts()->at(this->getAccounts()->size() - 1)->getId();
        int mid;

        // Implements Binary search algorithm to search in O(logn)
        while (low <= high) {
            mid = (low + high)/2;
            int id = this->getAccounts()->at(mid)->getId();
            if (id == searchID) {
                return this->getAccounts()->at(mid);
            } else if (id > searchID) {
                high = mid - 1;
            } else if (id < searchID) {
                low = mid + 1;
            }
        }

        cout << "Account Not Found..." << endl;
        return NULL; //
    };

    /**
     * Load all accounts from a prompted data URL path
     * pointing to a JSON-formatted file
     */
    void loadAccounts() {
        string dataString = "";
        string line = "";
        string path = "./data.json";

        // Prompt the user for a URL to the file
        cout << "Enter path to import data file: ";
        cin >> path;

        // Retrieve the file
        ifstream jsonFile(((path.length() > 0) ? path : "./data.json"));
        if (jsonFile.is_open())
        {
            // Load each line from the file.
            while ( getline (jsonFile,line) )
            {
                dataString += line;
            }
            jsonFile.close();
        }
        else {
            cout << "Unable to open file.." << endl;
            return;
        }

        // Parse the JSON file into a JSON object.
        json data = json::parse(dataString);
        this->insertIntoBank(data["accountList"]);
    };

    /**
     * Save accounts in the bank to a JSON-formatted file
     */
    void saveAccounts() {
        json saveData;

        // Loop through all accounts in application
        for (int i=0; i < accountList->size(); i++) {
            saveData["accountList"][i] = {

                            {"fName", accountList->at(i)->getFName()},
                            {"lName", accountList->at(i)->getLName()},
                            {"cBal", accountList->at(i)->getCBal()},
                            {"sBal", accountList->at(i)->getSBal()}

            };

            // Loop through checking transactions
            LinkedTransactionList * tempCheck = accountList->at(i)->getCheckingTransactions();
            Transaction * current = tempCheck->start;
            int j = 0;
            while (current) {
                saveData["accountList"][i]["checkingTransactions"][j] = {
                        {"id", current->getID()},
                        {"amt", current->getAmount()}
                };
                current = current->next;
                j++;
            }

            // Loop through savings transactions
            LinkedTransactionList * tempSave = accountList->at(i)->getSavingsTransactions();
            current = tempSave->start;
            j = 0;
            while (current) {
                saveData["accountList"][i]["savingsTransactions"][j] = {
                        {"id", current->getID()},
                        {"amt", current->getAmount()}
                };
                current = current->next;
                j++;
            }
        }

        // Write the JSON data to the file
        this->writeToFile(saveData);
    };

    void sortAccountsByBalance() {
        // NOT IMPLEMENTED OR NEEDED //
        cout << "NOT IMPLEMENTED.." << endl;
    }
};

#endif //BENNYSBANK_BANK_H
